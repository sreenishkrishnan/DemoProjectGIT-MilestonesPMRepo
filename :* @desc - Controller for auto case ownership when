/* @desc - Controller for auto case ownership when the case record is opened in console
 *          The ownership is changed to the current logged in user. 
 *        The configuration setting has the following
 *     - Record Types (Names are stored)
 *    - Queues - IDs  to avoid additional query
 *    - Profiles - IDs to avoid additional query 
 *         stored in a custom meta data type 
 *    - OTM Case Management (Object name)
 *    - Auto Case Assignment - OTM (OTM_Case_Management__mdt)
 *        There is also a global setting to check if this enabled
 * @output - The owner is changed and the page is refreshed
 * @author - System Partners
 * @date - 28-July-2016
 */

public with sharing class CC_CaseTakeOwnership {

  private final Case currentCase;
  private final String changeOwnerandRefresh;

  private Set<Id> enabledRecordTypes;
  
  OTMCaseManagement__c otmCaseSetting;

  public CC_CaseTakeOwnership(ApexPages.StandardController stdController) {
    
    // get the configuration setting for auto assignment

    otmCaseSetting = OTMCaseManagement__c.getInstance('Auto_Case_Ownership_OTM');      
    // get the current case Id
    Id caseId = stdController.getRecord().Id;
    
    if(otmCaseSetting != null){
      Set<Id> enabledQueues = new Set<Id>();
      Set<Id> enabledProfiles = new Set<Id>();

      // Comma separated list of Queue Ids (Ids are stored to avoid additional query)
      for(String s : otmCaseSetting.Queues_Enabled__c.split(',\\s*')){
        enabledQueues.add((Id)s);
      }

      // Comma separated list of Profile Ids (Ids are stored to avoid additional query)
      for(String s : otmCaseSetting.Profiles_Enabled__c.split(',\\s*')){
        enabledProfiles.add((Id)s);
      }

      // get the enabled record types Ids from Names 
      enabledRecordTypes = getEnabledRecordTypeIds();

      Id profileId = UserInfo.getProfileId();
      Id currentUserId = UserInfo.getUserId();

      // check if current case is not assigned to the logged in user and auto assignment is enabled
      if(otmCaseSetting.AutoOwnershipEnabled__c) {
        this.currentCase = [select Id, RecordTypeId, Ownerid from Case where Id =: caseId limit 1];
        if( currentCase.OwnerId != currentUserId && 
          enabledRecordTypes.contains(currentCase.RecordTypeId) && 
             enabledQueues.contains(currentCase.OwnerId) &&
             enabledProfiles.contains(profileId))
        {
          changeOwnerandRefresh = 'yes';
        }
      }
    } //if(!caseSetting.isEmpty()){
  }

  // Enabled Record type name are stored in custom meta data type
  // The auto assignment only applies to case record types enabled
  public Set<Id> getEnabledRecordTypeIds(){

    Integer i = 0;
    Set<Id> recordTypeIds = new Set<Id>();
    
    // Record Type names are stored as comma separated list
    String[] recordTypes = otmCaseSetting.Record_Types_Enabled__c.split(',\\s*');
    // get all record type for cases by name
    Map<String,Schema.RecordTypeInfo> recordTypeInfos = Schema.SObjectType.Case.getRecordTypeInfosByName();
    for(i=0; i < recordTypes.size(); i++){
      // check if the record type is valid
      if(recordTypeInfos.containsKey(recordTypes[i])){
        Id rt = recordTypeInfos.get(recordTypes[i]).getRecordTypeId();
        recordTypeIds.add(rt);  
      }
    }
    
    return recordTypeIds;
  } 

  // Assign the current logged in as owner, if all conditions are satisfied
  public void assignCurrentUserasOwner(){

    Id currentUserId = UserInfo.getUserId();
    // Change the owner only if all conditions are met
    if(changeOwnerandRefresh != null && changeOwnerandRefresh == 'yes'){
      currentCase.ownerid = currentuserId;
      currentCase.Owner_Changed__c = true;
      
    }
    
    update currentCase;  
  }

  public String getChangeOwnerandRefresh(){
    return changeOwnerandRefresh;
  }
}